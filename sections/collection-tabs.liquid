<div class="collection-switcher page-width">
  <ul class="collection-switcher__tabs">
    {% for block in section.blocks %}
      {% assign collection = collections[block.settings.collection_id] %}
      {% if collection %}
        <li class="collection-switcher__tab" data-for="{{ collection.handle }}">
          {{ collection.title }}
        </li>
      {% endif %}
    {% endfor %}
  </ul>
  <div class="collection-switcher__product-container"></div>
  <div class="collection-switcher__loading-state">
    <div class="collection-switcher__loading-state-spinner"></div>
  </div>
</div>

<script>
  console.log('loading');
  document.addEventListener('DOMContentLoaded', function () {
    const collectionTabs = document.querySelectorAll('.collection-switcher__tab');
    const collectionContainer = document.querySelector('.collection-switcher__product-container');
    const loadingState = document.querySelector('.collection-switcher__loading-state');
    const cardFragment = ``;
    collectionTabs.forEach((tab) => {
      tab.addEventListener('click', function () {
        collectionTabs.forEach((tab) => tab.classList.remove('active'));
        this.classList.add('active');
        const collectionHandle = this.getAttribute('data-for');
        showLoadingState();
        fetchCollection(collectionHandle);
      });
    });

    window.fetchCollection = function (collectionHandle) {
      console.log('Fetching collection:', collectionHandle); // Debugging log
      fetch(`/collections/${collectionHandle}/products.json`)
        .then((response) => {
          if (!response.ok) throw new Error('Network response was not ok');
          return response.json();
        })
        .then((data) => {
          console.log('Collection data received:', data); // Debugging log
          updateCollectionDisplay(data, collectionHandle);
          hideLoadingState();
        })
        .catch((error) => {
          console.error('Error loading the collection:', error);
          hideLoadingState();
        });
    };

    function updateCollectionDisplay(data, collectionHandle) {
      console.log('Updating collection display:', data); // Debugging log
      if (collectionContainer) {
        collectionContainer.innerHTML = ''; // Clear existing products
        data.products.forEach((product) => {
          const productElement = document.createElement('div');
          console.log(product);
          //find lowest price
          let highestPrice = product.variants[0].price;
          let lowestPrice = product.variants[0].price;
          product.variants.forEach((variant) => {
            if (variant.price > highestPrice) {
              highestPrice = variant.price;
            }
            if (variant.price < lowestPrice) {
              lowestPrice = variant.price;
            }
          });

          productElement.className = 'product-grid-item card-wrapper product-card-wrapper underline-links-hover';
          productElement.innerHTML = `
                                                <img src="${product.images[0].src}" alt="${product.title}" />
                                                <div class="card-content">
                                                <div class="card-information">
                                                    <div class="card__heading h5" id="title-template--15795771048001__featured_collection-7251681804353">
                                                        <a href="/products/${product.handle}" class="card__title card__title--link full-unstyled-link">
                                                          ${product.title}
                                                        </a>
                                                    </div>
                                                    <div class="price">
                                                      <div class="price__container">
                                                        <div class="price__regular">
                                                          <span class="visually-hidden visually-hidden--inline">Regular price</span>
                                                          <span class="price-item price-item--regular"> From ${lowestPrice} </span>
                                                        </div>
                                                        <div class="price__sale">
                                                          <span class="visually-hidden visually-hidden--inline">Regular price</span>
                                                          <span>
                                                            <s class="price-item price-item--regular"> ${highestPrice} </s> </span
                                                          ><span class="visually-hidden visually-hidden--inline">Sale price</span>
                                                          <span class="price-item price-item--sale price-item--last"> From ${lowestPrice} </span>
                                                        </div>
                                                      </div>
                                                    </div>
                                                  </div>
                                                </div>
                                        `;
          collectionContainer.appendChild(productElement);
        });
      }
    }

    function showLoadingState() {
      loadingState.style.display = 'flex';
      collectionContainer.style.display = 'none';
    }

    function hideLoadingState() {
      loadingState.style.display = 'none';
      collectionContainer.style.display = 'grid';
    }

    // Load the first collection on page load
    const firstCollectionTab = collectionTabs[0];
    if (firstCollectionTab) {
      const collectionHandle = firstCollectionTab.getAttribute('data-for');
      showLoadingState();
      fetchCollection(collectionHandle);
      firstCollectionTab.classList.add('active');
    }
  });
</script>

<style>
  .collection-switcher {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }
  .collection-switcher__tabs {
    display: flex;
    gap: 1rem;
    padding: 0;
    list-style: none;
  }
  .collection-switcher__tab {
    cursor: pointer;
    padding: 0.5rem 1rem;
    border: 1px solid #000;
  }
  .collection-switcher__tab.active {
    background-color: #000;
    color: #fff;
  }
  .collection-switcher__product-container {
    display: grid;
    gap: 1rem;
    grid-template-columns: 1fr 1fr;
  }
  .collection-switcher__product-container .product-grid-item {
    display: grid;
    gap: 1rem;
  }
  .collection-switcher__product-container .product-grid-item img {
    width: 100%;
  }
  .collection-switcher__loading-state {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
    height: 100%;
    min-height: 20rem;
  }
  .collection-switcher__loading-state-spinner {
    border: 6px solid rgba(0, 0, 0, 0.1);
    border-left-color: #000;
    border-radius: 50%;
    width: 4rem;
    height: 4rem;
    animation: spin 1s linear infinite;
    display: flex !important;
  }
  @keyframes spin {
    to {
      transform: rotate(360deg);
    }
  }
</style>

{% schema %}
{
  "name": "Collection Tabs",
  "settings": [],
  "blocks": [
    {
      "type": "collection",
      "name": "Collection Block",
      "settings": [
        {
          "id": "collection_id",
          "type": "collection",
          "label": "Select Collection"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Collection Tabs",
      "category": "Collection"
    }
  ]
}
{% endschema %}
